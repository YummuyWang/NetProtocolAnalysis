Timer.h   定义DSRUUTime计时器 getset
List.h	  链表
Tbl.h	  链表 返回链表头、判断空、满，判断是否为头 DSR读写锁  支持前后添加，查找，删除
struct tbl {
	list_t head;
	volatile unsigned int len;
	volatile unsigned int max_len;
#ifdef __KERNEL__
	rwlock_t lock;
#endif
};
Maint-buf.h  定义函数 
Link-cache.h  link-cache.c里的函数
struct lc_graph {
	struct tbl nodes;
	struct tbl links;
	struct lc_node *src;
#ifdef __KERNEL__
	struct timer_list timer;
	rwlock_t lock;
#endif
};                    
Dsr-pkt.h 定义DSR包报文格式
struct dsr_pkt {
	struct in_addr src;	/* IP level data */   源ip    struct in_addr {
	struct in_addr dst;					目的ip	    in_addr_t s_addr;
	struct in_addr nxt_hop;			下一跳ip		};
	struct in_addr prv_hop;		上一跳ip   表示一个32位的IPv4地址。in_addr_t一般
	int flags;						为32位的unsigned int，其字节顺序为网络字节序，
	int salvage;	即该无符号数采用大端字节序。每8位表示一个IP地址中的一个数值。
#ifdef NS2
	union {
		struct hdr_mac *ethh;
		unsigned char *raw;
	} mac;
	struct hdr_ip ip_data;
	union {
		struct hdr_ip *iph;
		char *raw;
	} nh;
#else
	union {
		struct ethhdr *ethh;
		char *raw;
	} mac;
	union {
		struct iphdr *iph;
		char *raw;
	} nh;
	char ip_data[60];
#endif
	struct {
		union {
			struct dsr_opt_hdr *opth;
			char *raw;
		};		
		char *tail, *end;  
	} dh;
		
	int num_rrep_opts, num_rerr_opts, num_rreq_opts, num_ack_opts;
	struct dsr_srt_opt *srt_opt;
	struct dsr_rreq_opt *rreq_opt;	/* Can only be one */
	struct dsr_rrep_opt *rrep_opt[MAX_RREP_OPTS];
	struct dsr_rerr_opt *rerr_opt[MAX_RERR_OPTS];
	struct dsr_ack_opt *ack_opt[MAX_ACK_OPTS];
	struct dsr_ack_req_opt *ack_req_opt;
	struct dsr_srt *srt;	/* Source route */


	int payload_len;
#ifdef NS2
	AppData *payload;
	Packet *p;
#else
	char *payload;
	struct sk_buff *skb;
#endif

}
#Include<ip.h>
struct iphdr {
  #if defined(__LITTLE_ENDIAN_BITFIELD)		小端模式下
      __u8    ihl:4,		首部长度(4位)
          version:4;		ip协议版本IPv4
  #elif defined (__BIG_ENDIAN_BITFIELD)   	大端模式下
      __u8    version:4,
          ihl:4;
  #else
  #error  "Please fix <asm/byteorder.h>"
  #endif
     __u8    tos;			  	8位服务类型字段
     __be16  tot_len;			16位IP数据报总长度
     __be16  id;				16位标识字段（唯一表示主机发送的每一分数据报）
     __be16  frag_off;			(3位分段标志+13位分段偏移数)
     __u8    ttl;				8位数据报生存时间
     __u8    protocol;		协议字段（8位）
     __sum16 check;			16位首部校验
     __be32  saddr;			源IP地址
     __be32  daddr;			目的IP地址
     /*The options start here. */
 };

#include<if_packet.h>      原始数据包的数据结构定义
Sockaddr_pkt
Sockaddr_Ⅱ
定义 主机、广播、组播、其他主机
定义帧结构 
用于接收原始数据包
1.	#ifndef __LINUX_IF_PACKET_H
2.	#define __LINUX_IF_PACKET_H
3.	
4.	struct sockaddr_pkt
5.	{
6.	unsigned short spkt_family;
7.	unsigned char spkt_device[14];
8.	unsigned short spkt_protocol;
9.	};
10.	
11.	struct sockaddr_ll
12.	{
13.	unsigned short sll_family;
14.	unsigned short sll_protocol;
15.	int sll_ifindex;
16.	unsigned short sll_hatype;
17.	unsigned char sll_pkttype;
18.	unsigned char sll_halen;
19.	unsigned char sll_addr[8];
20.	};
21.	
22.	/* Packet types */
23.	
24.	#define PACKET_HOST 0 /* To us */
25.	#define PACKET_BROADCAST 1 /* To all */
26.	#define PACKET_MULTICAST 2 /* To group */
27.	#define PACKET_OTHERHOST 3 /* To someone else  */
28.	#define PACKET_OUTGOING 4 /* Outgoing of any type */
29.	/* These ones are invisible by user level */
30.	#define PACKET_LOOPBACK 5 /* MC/BRD frame looped back */
31.	#define PACKET_FASTROUTE 6 /* Fastrouted frame */
32.	
33.	/* Packet socket options */
34.	
35.	#define PACKET_ADD_MEMBERSHIP 1
36.	#define PACKET_DROP_MEMBERSHIP 2
37.	#define PACKET_RECV_OUTPUT 3
38.	/* Value 4 is still used by obsolete turbo-packet. */
39.	#define PACKET_RX_RING 5
40.	#define PACKET_STATISTICS 6
41.	#define PACKET_COPY_THRESH 7
42.	
43.	struct tpacket_stats
44.	{
45.	unsigned int tp_packets;
46.	unsigned int tp_drops;
47.	};
48.	
49.	struct tpacket_hdr
50.	{
51.	unsigned long tp_status;
52.	#define TP_STATUS_KERNEL 0
53.	#define TP_STATUS_USER 1
54.	#define TP_STATUS_COPY 2
55.	#define TP_STATUS_LOSING 4
56.	#define TP_STATUS_CSUMNOTREADY 8
57.	unsigned int tp_len;
58.	unsigned int tp_snaplen;
59.	unsigned short tp_mac;
60.	unsigned short tp_net;
61.	unsigned int tp_sec;
62.	unsigned int tp_usec;
63.	};
64.	
65.	#define TPACKET_ALIGNMENT 16
66.	#define TPACKET_ALIGN(x) (((x)+TPACKET_ALIGNMENT-1)&~(TPACKET_ALIGNMENT-1))
67.	#define TPACKET_HDRLEN (TPACKET_ALIGN(sizeof(struct tpacket_hdr)) + sizeof(struct sockaddr_ll))
68.	
69.	/*
70.	   Frame structure:
71.	
72.	   - Start. Frame must be aligned to TPACKET_ALIGNMENT=16
73.	   - struct tpacket_hdr
74.	   - pad to TPACKET_ALIGNMENT=16
75.	   - struct sockaddr_ll
76.	   - Gap, chosen so that packet data (Start+tp_net) alignes to TPACKET_ALIGNMENT=16
77.	   - Start+tp_mac: [ Optional MAC header ]
78.	   - Start+tp_net: Packet data, aligned to TPACKET_ALIGNMENT=16.
79.	   - Pad to align to TPACKET_ALIGNMENT=16
80.	 */
81.	
82.	struct tpacket_req
83.	{
84.	unsigned int tp_block_size; /* Minimal size of contiguous block */
85.	unsigned int tp_block_nr; /* Number of blocks */
86.	unsigned int tp_frame_size; /* Size of frame */
87.	unsigned int tp_frame_nr; /* Total number of frames */
88.	};
89.	
90.	struct packet_mreq
91.	{
92.	int mr_ifindex;
93.	unsigned short mr_type;
94.	unsigned short mr_alen;
95.	unsigned char mr_address[8];
96.	};
97.	
98.	#define PACKET_MR_MULTICAST 0
99.	#define PACKET_MR_PROMISC 1
100.	#define PACKET_MR_ALLMULTI 2
101.	
102.	#endif



#include<if_ether.h>
struct ethhdr
{
    unsigned char h_dest[ETH_ALEN]; //目的MAC地址
     
    unsigned char h_source[ETH_ALEN]; //源MAC地址
     
    __u16 h_proto ; //网络层所使用的协议类型 16位
}__attribute__((packed))  //用于告诉编译器不要对这个结构体中的缝隙部分进行填充操作；




Dsr.opt.h   struct dsr-opt-hdr
Pkt len
Dst_
struct dsr_opt_hdr {
	u_int8_t nh;
	u_int16_t p_len;	/* payload length */               有效负载
#ifdef NS2
	static int offset_;

	inline static int &offset() {						偏移
		return offset_;
	}
	inline static dsr_opt_hdr *access(const Packet * p) {		返回packet的进入点？
		return (dsr_opt_hdr *) p->access(offset_);
	}

	int size() {								返回字节大小 （长度+结构体大小）
		return ntohs(p_len) + sizeof(struct dsr_opt_hdr);
	}
#endif				/* NS2 */
	struct dsr_opt option[0];
};


struct dsr_pad1_opt {
	u_int8_t type;
};

#ifdef NS2
#define DSR_NO_NEXT_HDR_TYPE PT_NTYPE
#else
#define DSR_NO_NEXT_HDR_TYPE 0
#endif

/* Header lengths */
#define DSR_FIXED_HDR_LEN 4	/* Should be the same as DSR_OPT_HDR_LEN, but that
			* is not the case in ns-2 */  定义首部长度，应该与DSR_OPT_HDR长度相同
#define DSR_OPT_HDR_LEN sizeof(struct dsr_opt_hdr)
#define DSR_OPT_PAD1_LEN 1
#define DSR_PKT_MIN_LEN 24	/* IP header + DSR header =  20 + 4 */   DSR最小长度，应为IP报文长度20字节+DSR首部长度4字节
定义DSR首部类型
/* Header types */
#define DSR_OPT_PADN       0
#define DSR_OPT_RREP       1
#define DSR_OPT_RREQ       2
#define DSR_OPT_RERR       3
#define DSR_OPT_PREV_HOP   5
#define DSR_OPT_ACK       32
#define DSR_OPT_SRT       96
#define DSR_OPT_TIMEOUT  128
#define DSR_OPT_FLOWID   129
#define DSR_OPT_ACK_REQ  160
#define DSR_OPT_PAD1     224

  获取报文
 
增删改查
Dsr.h
 广播，255.255.255.255
  定义MTU最大传输长度
枚举confval和confval_type
 
定义最大缓存长度100，rreq（路由请求 发现更好路径）表64 ，发送最大缓存长度100， rreq表id最长16
 名字，值，类型
DSR节点
 
if_addr  主机地址
bc_addr 组播地址 
设备状态
锁

Xmit发射

 
Get  set
自旋锁保证不被修改
  Init dsr_node
剩下的修改内部属性


Dsr-ack.h
 
Dsr-dev.h
Emit 、deliver 接收发送
Dsr-io.h
Receive    Start_emit
Dsr-rerr.h
Dsr错误处理
 
 router错误信息及 router-error收发
Route-error packet 用于路由维护
Dsr-rrep
Router-reply packet
 
 
Router-reply 收发 及路由表维护

Dsr-rreq.h
 结构
 
对路由表进行维护及路由发现
Dsr-rtc.h  路由表cache
 
