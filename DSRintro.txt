动态源路由协议（DSR）是一种简单有效的路由协议，专为多跳无线网络设计移动节点的ad hoc网络。
DSR允许网络完全自组织和自配置，而不需要任何现有的网络基础设施或管理。
协议是由两个主要的“路由发现”机制和“路由维护”，它协同工作，允许节点发现并维护到ad hoc网络中任意目的地的路由。
协议的所有方面完全按需操作，允许DSR的路由包开销，自动扩展到只需要对当前使用的路由中的更改作出反应。
该协议允许多个路由到任何目的地，并允许每个发送方选择和控制路由其数据包时使用的路由，例如，用于负载平衡或增强健壮性。DSR协议的其他优点包括易于保证
无环路路由，在包含单向链路的网络中操作，在路由中仅使用“软状态”，并且恢复非常迅速当网络中的路由更改时。
DSR协议主要是为大约200个节点的移动自组织网络设计的，它被设计成即使在非常高的移动率下也能很好地工作。
本文档指定用于路由单播IPv4数据包的DSR协议的操作。

动态源路由协议（DSR）是一种按需协议，旨在限制带宽消除了表驱动方法中所需的周期表更新消息，从而使ad hoc无线网络中的控制数据包消耗了费用。
此路由协议与其他按需路由协议之间的主要区别在于，此协议无信标，因此不需要定期的hello数据包（信标）传输，节点可使用该数据包将其存在告知节点。
在路由构建阶段，此协议（以及所有其他按需路由协议）的基本方法是通过在网络中泛洪RouteRequest数据包来建立路由。
目的节点在接收到RouteRequest数据包后，通过将RouteReply数据包发送回源进行响应，该数据包携带由接收到的RouteRequest数据包遍历的路由。

考虑一个没有到目的地的路由的源节点。
当它有数据包要发送到该目的地时，它将启动RouteRequest包。
此RouteRequest遍及整个网络。
每个节点在接收到RouteRequest数据包后，如果尚未转发该数据包，则将其重新广播到其邻居，前提是该节点不是目的节点，
并且该数据包的生存时间尚未超过（TTL）计数器。
每个RouteRequest携带一个由源节点生成的序列号以及它遍历的路径。
节点在收到RouteRequest数据包后，会在转发数据包之前先检查该数据包上的序列号。
仅当数据包不是重复的RouteRequest时，才转发该数据包。
数据包上的序列号用于防止形成环路，并避免通过多个路径接收它的中间节点对同一RouteRequest进行多次传输。
因此，除目的地以外的所有节点都在路由构建阶段转发RouteRequest数据包。
目的节点在收到第一个RouteRequest数据包后，会通过RouteRequest数据包经过的反向路径回复源节点。
如果以混杂模式（节点可以接收既不广播也不发往自身的数据包的操作模式）进行操作，则节点还可以了解数据包所遍历的相邻路由。
在路线构建阶段也使用此路线缓存。


一。介绍

动态源路由协议（DSR）[15，16]是一种简单有效的路由协议，专门设计用于移动节点的多跳无线自组织网络。使用DSR，网络

完全是自组织和自配置的，不需要现有的网络基础设施或管理。网络节点相互协作转发数据包以允许通信

在不在彼此无线传输范围内的节点之间的多个“跳”。当网络中的节点移动时

当无线传输条件如干扰源发生变化时，所有路由都由DSR路由协议自动确定和维护。由于到达任何目的地所需的中间跳的数目或序列随时可能改变，因此产生的网络拓扑

可能相当富有而且变化迅速。

在设计DSR时，我们试图创建一个路由协议，该协议具有非常低的开销，但能够对

网络。DSR协议提供了高反应性的服务，以帮助确保在节点移动或网络条件发生其他变化的情况下成功地传送数据包。

DSR协议由两个主要机制组成，它们协同工作，允许在

特设网络：

-路由发现是希望将包发送到目的地节点D的节点获得源路由的机制

到D。路由发现仅在S尝试将数据包发送到D且不知道到D的路由时使用。

-路由维护是一种机制，通过该机制，当使用到D的源路由时，如果网络

拓扑结构已更改，无法再使用其路由

因为沿途的一条路已经不起作用了。当路由维护指示源路由已断开时，S可以尝试

使用它碰巧知道的到D的任何其他路由，或者可以再次调用路由发现来为到D的后续数据包找到新的路由。

此路由的路由维护仅在S实际向D发送数据包时使用。

在DSR中，路由发现和路由维护都是完全操作的

“按需”。特别是，与其他协议不同，DSR不需要在网络的任何层上使用任何类型的周期性数据包。例如，DSR不使用任何周期性路由通告、链路状态感知或邻居检测包，也不依赖于网络中任何底层协议的这些功能。这种完全按需的行为和缺乏周期性的活动允许

由DSR引起的一路扩展的开销包数

Johnson等人于2005年1月19日到期[第1页]INTERNET-DRAFT The Dynamic Source Routing Protocol 2004年7月19日

当所有节点彼此近似静止且已经发现当前通信所需的所有路由时，下降到零。当节点开始移动更多或

当通信模式改变时

DSR自动缩放到只需要跟踪当前使用的路由。不影响当前使用的路由的网络拓扑更改将被忽略，并且不会引起

协议。

DSR维护的所有状态都是“软状态”[6]，即

任何状态都不会干扰协议的正确运行；所有状态都可以根据需要被发现，并且可以方便地

如果在发生故障后需要，可以快速重新发现，而不会对协议造成重大影响。只有软状态的使用才允许

路由协议对诸如丢失或延迟的路由数据包或节点故障等问题非常健壮。尤其是

发生故障并重新启动的DSR可以在重新启动后立即轻松地重新加入网络；如果发生故障的节点参与转发

其他节点的数据包作为一个或多个路由上的中间跳，它也可以在重新启动后快速恢复此转发，

路由协议没有中断或中断最少。

响应于单个路由发现（以及通过从所听到的其它分组的路由信息），节点可以学习和

缓存到任何目标的多个路由。这种对多个路由的支持使得对路由更改的反应更加迅速，因为一个具有多个到目标的路由的节点可以尝试另一个缓存的路由，如果它一直使用的路由失败的话。这个缓存

也避免了每次使用中的路由中断时需要执行新路由发现的开销。发件人

数据包选择并控制用于其自身数据包的路由，这与对多个路由的支持一起还允许定义诸如负载平衡之类的特性。